// -----------------------------------------------------------------------
// MatchPoint - DKFZ translational registration framework
//
// Copyright (c) German Cancer Research Center (DKFZ),
// Software development for Integrated Diagnostics and Therapy (SIDT).
// ALL RIGHTS RESERVED.
// See mapCopyright.txt or
// http://www.dkfz.de/en/sidt/projects/MatchPoint/copyright.html
//
// This software is distributed WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE.  See the above copyright notices for more information.
//
//------------------------------------------------------------------------
/*!
// This file is automatically generated by CMake for a certain algorithm
*/

#ifndef __@ALGORITHM_NAME@_PROFILE_RESOURCE_H
#define __@ALGORITHM_NAME@_PROFILE_RESOURCE_H

#include "mapUID.h"
#include "mapExceptionObject.h"
#include "mapAlgorithmProfileHelper.h"

namespace map
{
	namespace algorithm
	{

		const char *const @ALGORITHM_NAME@_profile = "@ALGORITHM_PROFILE_XML_Content@";
		
		struct @ALGORITHM_NAME@UIDPolicy
		{
		public:
			static ::map::algorithm::UID::Pointer UID()
			{
				::map::core::OStringStream stream;
				stream << __DATE__ << " " << __TIME__ << "; MAP "<<MAP_FULL_VERSION_STRING<<"; ITK "<<ITK_VERSION_MAJOR<<"."<<ITK_VERSION_MINOR<<"."<<ITK_VERSION_PATCH;
				::map::core::String tag = stream.str();
				::map::algorithm::UID::Pointer spResult = ::map::algorithm::UID::New("@ALGORITHM_PROFILE_UID_Namespace@","@ALGORITHM_PROFILE_UID_Name@","@ALGORITHM_PROFILE_UID_Version@",tag);
				return spResult;
			}

			static const ::map::core::String AlgorithmDescription()
			{				
			  ::map::core::String tmpProfile = @ALGORITHM_NAME@UIDPolicy::AlgorithmProfile();
			  return ::map::algorithm::profile::getDescription(tmpProfile);
			}
			
			static const ::map::core::String AlgorithmProfile()
			{				
				return @ALGORITHM_NAME@_profile;
			}
		};
			
	}
}

#endif
