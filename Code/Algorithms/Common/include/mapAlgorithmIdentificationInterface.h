// -----------------------------------------------------------------------
// MatchPoint - DKFZ translational registration framework
//
// Copyright (c) German Cancer Research Center (DKFZ),
// Software development for Integrated Diagnostics and Therapy (SIDT).
// ALL RIGHTS RESERVED.
// See mapCopyright.txt or
// http://www.dkfz.de/en/sidt/projects/MatchPoint/copyright.html
//
// This software is distributed WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE.  See the above copyright notices for more information.
//
//------------------------------------------------------------------------
/*!
// @file
// @version $Revision: 4912 $ (last changed revision)
// @date    $Date: 2013-07-31 10:04:21 +0200 (Mi, 31 Jul 2013) $ (last change date)
// @author  $Author: floca $ (last changed by)
// Subversion HeadURL: $HeadURL: http://sidt-hpc1/dkfz_repository/NotMeVisLab/SIDT/MatchPoint/trunk/Code/Algorithms/Common/include/mapAlgorithmIdentificationInterface.h $
*/




#ifndef __ALGORITHM_IDENTIFICATION_INTERFACE_H
#define __ALGORITHM_IDENTIFICATION_INTERFACE_H

#include "mapUID.h"
#include "mapAlgorithmProfileHelper.h"
#include "mapExceptionObject.h"

namespace map
{
	namespace algorithm
	{
		namespace facet
		{

			/*! @class AlgorithmIdentificationInterface
			    @brief This is the identification interface for any MatchPoint algorithm.

			    A algorithm implementing this interface offers a possibility to request its unique identifier (UID).\n\n
			    The member function getUID() can be implemented via the marcro mapDefineAlgorithmUIDMacro() or mapDefineAlgorithmUIDWithAutmaticBuildNRMacro().
			    Algorithms that are implemented with reboxing possibilities in mind are using UIDPolicies via templates generated by mapGenerateAlgorithmUIDPolicyMacro().
			    @sa mapDefineAlgorithmUIDMacro
			    @sa mapDefineAlgorithmUIDWithAutmaticBuildNRMacro
			    @sa mapGenerateAlgorithmUIDPolicyMacro
			    @ingroup AlgorithmFacets UID
			 */
			class AlgorithmIdentificationInterface
			{
			public:
				typedef AlgorithmIdentificationInterface Self;

				typedef algorithm::UID UIDType;
				typedef UIDType::Pointer UIDPointer;

				/*! Returns the unique ID (UID) of the algorithm.
          @remark The same information may also be defined in the
          profile string (getAlgorithmProfile()). But this is a convinient access to this information.
				  @eguarantee strong
				  @return returns SmartPointer to the UID object.
				 */
				virtual UIDPointer getUID() const = 0;

				/*! Returns the profile string of the algorithm. The string contains within an xml structure
          all general given informations (e.g. supported dimensionsm, description, used transform modell, ...).
          Use AlgorithmProfileHelper to parse the profile string.
				  @eguarantee strong
				 */
        virtual map::core::String getAlgorithmProfile() const = 0;

				/*! Returns the description string of the algorithm.
          @remark The same information may also be defined in the
          profile string (getAlgorithmProfile()). But this is a convinient access to this information.
				  @eguarantee strong
          */
        virtual map::core::String getAlgorithmDescription() const = 0;

      protected:
				AlgorithmIdentificationInterface() {};
				virtual ~AlgorithmIdentificationInterface() {};

			private:
				//No copy constructor allowed
				AlgorithmIdentificationInterface(const Self &source); //purposely not implemented
				void operator=(const Self &); //purposely not implemented
			};

		}
	}
}

/*! Helper macro that implements the abstract functions of a AlgorithmIdentificationInterface.
 The macro assumes that the algorithm class is a Policy class (like the ones generated by mapGenerateAlgorithmUIDPolicyMacro)
 as an ancestor class.*/
#define mapDefineAlgorithmIdentificationByPolicyMacro \
	virtual ::map::algorithm::UID::Pointer getUID() const \
	{ \
		return this->UID();\
	}\
  virtual map::core::String getAlgorithmProfile() const\
  { \
  return this->AlgorithmProfile();\
  }\
  virtual map::core::String getAlgorithmDescription() const\
  {\
  return this->AlgorithmDescription();\
  }

/*! Helper macro that generates a policy struct used by algorithm templates (e.g. ITKImageRegistrationAlgorithm)
 * to specify the algorithm UID, profile and description
 * Algorithms specified by using the CMake utilities provided by MatchPoint generate fitting UIDPolicies
 * automatically (see all deployed algorithms in the MatchPoint release). For any other algorithms this macro can
 * be used to generate a suitable policy.*/

#define mapGenerateAlgorithmUIDPolicyMacro(policyName, ns, name, version, profile) \
	struct policyName\
	{\
	public:\
		static ::map::algorithm::UID::Pointer UID()\
		{\
			::map::core::OStringStream stream;\
			stream << __DATE__ << " " << __TIME__ << "; MAP "<<MAP_FULL_VERSION_STRING<<"; ITK "<<ITK_VERSION_MAJOR<<"."<<ITK_VERSION_MINOR<<"."<<ITK_VERSION_PATCH;\
			::map::core::String tag = stream.str();\
			::map::algorithm::UID::Pointer spResult = ::map::algorithm::UID::New(ns,name,version,tag);\
			return spResult;\
		}\
    static const ::map::core::String AlgorithmDescription()\
    {\
      ::map::core::String tmpProfile = policyName::AlgorithmProfile();\
      ::map::structuredData::Element::Pointer spProfile = ::map::algorithm::parseProfileString(tmpProfile);\
      return ::map::algorithm::getAlgorithmDescription(spProfile);\
    }\
    static const ::map::core::String AlgorithmProfile()\
    {\
      return profile;\
    }\
	}

#endif
